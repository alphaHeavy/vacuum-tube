#include <Cmm.h>

// #define INPKG(a) vacuumzmtubezm0zi1zi0zi0_GHCziVacuumTubeziMorgue_ ## a
#define INPKG(a) vacuuzuLIsuEH5apgaDq9q9kbey2g_GHCziVacuumTubeziMorgue_ ## a

// VacuumWalker_getInfoTable :: Any -> State# s -> (# State# s, Addr# #)
VacuumWalker_getInfoTable (P_ a)
{
  return (%GET_STD_INFO(UNTAG(a)));
}

// VacuumWalker_dumpArray :: Addr# -> Word# -> Word# -> Word# -> EncodedState -> (# EncodedStates #)
VacuumWalker_dumpArray (P_ a, P_ clos, W_ info, W_ type, P_ st)
{
  // Serialize.pushArrWords :: Addr# -> Addr# -> ByteArray# -> EncodedState -> EncodedState
  (P_ stx) = call %ENTRY_CODE(INPKG(pushArrWords_info)) (INPKG(pushArrWords_closure), info, clos, st);

  // popState :: EncodedState -> EncodedState
  jump %ENTRY_CODE(INPKG(popState_info)) (INPKG(popState_closure), stx);
}

VacuumWalker_dumpClosure (P_ a, P_ clos, W_ info, W_ type, P_ st)
{
  W_ ptrs;
  ptrs = TO_W_(%INFO_PTRS(%STD_INFO(info)));

  // Serialize.pushClosure :: Word# -> Addr# -> Addr# -> EncodedState -> EncodedState
  (P_ stx) = call %ENTRY_CODE(INPKG(pushClosure_info)) (INPKG(pushClosure_closure), type, info, GETTAG(a), clos, st);

  jump VacuumWalker_dumpPtrs (clos, 0, ptrs, stx);
}

// VacuumWalker_dumpIndirection :: Addr# -> Word# -> Word# -> Word# -> EncodedState -> (# EncodedStates #)
VacuumWalker_dumpIndirection (P_ a, P_ clos, W_ info, W_ type, P_ st)
{
  // Serialize.pushClosure :: Word# -> Addr# -> Addr# -> EncodedState -> EncodedState
  (P_ stx) = call %ENTRY_CODE(INPKG(pushClosure_info)) (INPKG(pushIndirection_closure), info, GETTAG(a), clos, UNTAG(StgInd_indirectee(clos)), st);

  // popState :: EncodedState -> EncodedState
  jump %ENTRY_CODE(INPKG(popState_info)) (INPKG(popState_closure), stx);
}

// VacuumWalker_dumpSelector :: Addr# -> Word# -> Word# -> Word# -> EncodedState -> (# EncodedStates #)
VacuumWalker_dumpSelector (P_ a, P_ clos, W_ info, W_ type, P_ st)
{
  // Serialize.pushClosure :: Word# -> Addr# -> Addr# -> EncodedState -> EncodedState
  (P_ stx) = call %ENTRY_CODE(INPKG(pushClosure_info)) (INPKG(pushSelector_closure), info, GETTAG(a), clos, UNTAG(StgThunk_payload(clos, 0)), st);

  // popState :: EncodedState -> EncodedState
  jump %ENTRY_CODE(INPKG(popState_info)) (INPKG(popState_closure), stx);
}

// VacuumWalker_dumpStatic :: Addr# -> Word# -> Word# -> Word# -> EncodedState -> (# EncodedStates #)
VacuumWalker_dumpStatic (P_ a, P_ clos, W_ info, W_ type, P_ st)
{
  // Serialize.pushStatic :: Word# -> Addr# -> Addr# -> EncodedState -> EncodedState
  (P_ stx) = call %ENTRY_CODE(INPKG(pushStatic_info)) (INPKG(pushStatic_closure), clos, st);

  // popState :: EncodedState -> EncodedState
  jump %ENTRY_CODE(INPKG(popState_info)) (INPKG(popState_closure), stx);
}

// Entry point in the Cmm side to walk the value graph pointed to from a
// while folding st over each value and their respective payloads
//
// VacuumWalker_encodeObject :: a -> EncodedState -> EncodedState
VacuumWalker_encodeObject (P_ a, P_ st)
{
  P_ clos;
  clos = UNTAG(a);
  if (clos == 0)
  {
    return (st);
  }

  W_ info, type;
  info = %INFO_PTR(clos);
  type = TO_W_(%INFO_TYPE(%STD_INFO(info)));

  switch [INVALID_OBJECT .. N_CLOSURE_TYPES] (type)
  {
    // specialization for ByteArray#
    case ARR_WORDS:
    {
      jump VacuumWalker_dumpArray (a, clos, info, type, st);
    }

    // @TODO: implement, frozen mutable arrays are ok
    case MUT_ARR_PTRS_FROZEN0, MUT_ARR_PTRS_FROZEN:
      goto FAIL;

    // but not after they're thawed
    case MUT_ARR_PTRS_CLEAN, MUT_ARR_PTRS_DIRTY:
      goto FAIL;

    // we've stumbled upon thread related bits
    case TSO, STACK, UPDATE_FRAME, CATCH_FRAME, UNDERFLOW_FRAME, STOP_FRAME:
      goto FAIL;

    // MVars
    case MUT_VAR_CLEAN, MUT_VAR_DIRTY:
      goto FAIL;

    // STM support
    case TREC_CHUNK, ATOMICALLY_FRAME, CATCH_RETRY_FRAME, CATCH_STM_FRAME:
      goto FAIL;

    // pointer types
    case WEAK, PRIM, MUT_PRIM:
      goto FAIL;

    // @TODO: unsure about these ... i'm guessing we need to handle them
    case RET_BCO, RET_SMALL, RET_BIG, RET_FUN, AP_STACK:
      goto FAIL;

    case BLACKHOLE, WHITEHOLE, IND, IND_PERM:
    {
      jump VacuumWalker_dumpIndirection (a, clos, info, type, st);
    }

    case IND_STATIC, CONSTR_STATIC, CONSTR_NOCAF_STATIC, FUN_STATIC, THUNK_STATIC:
    {
      jump VacuumWalker_dumpStatic (a, clos, info, type, st);
    }

    case THUNK_SELECTOR:
    {
      jump VacuumWalker_dumpSelector (a, clos, info, type, st);
    }

    case CONSTR, CONSTR_1_0, CONSTR_0_1, CONSTR_2_0, CONSTR_1_1, CONSTR_0_2,
         FUN, FUN_1_0, FUN_0_1, FUN_2_0, FUN_1_1, FUN_0_2,
         THUNK, THUNK_1_0, THUNK_0_1, THUNK_2_0, THUNK_1_1, THUNK_0_2,
         AP, PAP:
    {
      jump VacuumWalker_dumpClosure (a, clos, info, type, st);
    }

    default:
    {
FAIL:
      // Serialize.unsupportedTag :: Word# -> Addr# -> Addr# -> EncodedState -> EncodedState
      jump %ENTRY_CODE(INPKG(unsupportedTag_info)) (INPKG(unsupportedTag_closure), type, info, clos, st);
    }
  }
}

// Call yieldPtr for each pointer payload then call dumpNPtrs for the rest
VacuumWalker_dumpPtrs (P_ clos, W_ i, W_ lim, P_ st)
{
  if (i < lim)
  {
    // yieldPtr :: Word# -> Addr# -> EncodedState -> EncodedState
    P_ val;
    val = StgClosure_payload(clos, i);
    (P_ stx) = call %ENTRY_CODE(INPKG(yieldPtr_info)) (INPKG(yieldPtr_closure), i, val, UNTAG(val), st);
    jump VacuumWalker_dumpPtrs (clos, i + 1, lim, stx);
  }
  else
  {
    W_ info, nptrs;
    info = %GET_STD_INFO(clos);
    nptrs = TO_W_(%INFO_NPTRS(info));
    jump VacuumWalker_dumpNPtrs (clos, i, lim + nptrs, st);
  }
}

// Call yieldNPtr for each non-pointer payload then pop the current value off
// the serialization stack, continuing on our walk
VacuumWalker_dumpNPtrs (P_ clos, W_ i, W_ lim, P_ st)
{
  if (i < lim)
  {
    // yieldNPtr :: Word# -> Word# -> EncodedState -> EncodedState
    (P_ stx) = call %ENTRY_CODE(INPKG(yieldNPtr_info)) (INPKG(yieldNPtr_closure), i, StgClosure_payload(clos, i), st);
    jump VacuumWalker_dumpNPtrs (clos, i + 1, lim, stx);
  }
  else
  {
    // popState :: EncodedState -> EncodedState
    jump %ENTRY_CODE(INPKG(popState_info)) (INPKG(popState_closure), st);
  }
}
